"""
Module for processing and cleaning bank statement data.
"""
from typing import List, Dict, Any
import pandas as pd
from pandas import DataFrame


class DataCleaner:
    """Handles cleaning and standardization of transaction data."""

    REQUIRED_COLUMNS = {
        'trans_date', 'value_date', 'transaction_details',
        'debit', 'credit', 'balance'
    }

    def standardize_columns(self, df: DataFrame) -> DataFrame:
        """
        Standardize column names and ensure required columns exist.

        Args:
            df: Input DataFrame with transaction data

        Returns:
            DataFrame with standardized column names and required columns
        """
        # Standardize existing column names
        df.columns = df.columns.str.lower().str.replace(' ', '_')

        # Add missing required columns
        missing_cols = self.REQUIRED_COLUMNS - set(df.columns)
        return df.assign(**{col: None for col in missing_cols})

    def clean_transaction_descriptions(self, df: DataFrame) -> DataFrame:
        """
        Clean and standardize transaction descriptions.

        Args:
            df: Input DataFrame with transaction data

        Returns:
            DataFrame with cleaned transaction descriptions
        """
        if 'transaction_details' not in df.columns:
            return df

        df = df.copy()
        df['transaction_details'] = (
            df['transaction_details'].str.strip().str.upper().fillna('')
        )
        return df

    def validate_data(self, df: DataFrame) -> List[Dict[str, Any]]:
        """
        Validate data quality and completeness.

        Args:
            df: Input DataFrame with transaction data

        Returns:
            List of validation issues found in the data
        """
        issues: List[Dict[str, Any]] = []

        # Filter out opening balance for validation
        df_transactions = df.query("transaction_details != 'OPENING BALANCE'")

        # Check missing values in required fields
        missing_values = df_transactions.isnull().sum()
        issues.extend([
            {'type': 'missing_values', 'column': col, 'count': count}
            for col, count in missing_values.items()
            if count > 0 and col not in {'debit', 'credit'}
        ])

        # Validate transaction amounts
        invalid_transactions = df_transactions['debit'].notna() & df_transactions['credit'].notna()
        if invalid_transactions.any():
            issues.append({
                'type': 'invalid_transaction',
                'message': f'Found {invalid_transactions.sum()} transactions with both debit and credit'
            })

        return issues

    def deduplicate_transactions(self, df: DataFrame) -> DataFrame:
        """
        Remove duplicate transactions from the dataset.

        Args:
            df: Input DataFrame with transaction data

        Returns:
            DataFrame with duplicates removed
        """
        return df.drop_duplicates()
