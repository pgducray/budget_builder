"""
Module for loading bank statement data.
"""
from typing import List, Dict, Any, Optional
import pandas as pd
from pathlib import Path
import PyPDF2
import re


class StatementLoader:
    """Handles loading and initial preprocessing of bank statements."""

    def __init__(self, data_dir: Optional[Path] = None):
        """Initialize with data directory path."""
        self.data_dir = Path("data/raw") if data_dir is None else data_dir

    def detect_file_type(self, file_path: Path) -> str:
        """Detect file type (PDF or CSV)."""
        suffix = file_path.suffix.lower()
        if suffix not in ['.pdf', '.csv']:
            raise ValueError(f"Unsupported file type: {suffix}")
        return suffix[1:]  # Remove the dot

    def _extract_amount(self, text: str) -> Optional[float]:
        """Extract amount from text, handling commas in numbers."""
        match = re.search(r'-?[\d,]+\.\d{2}', text)
        if match:
            return float(match.group().replace(',', ''))
        return None

    def _process_transaction_line(self, line: str) -> Optional[Dict[str, Any]]:
        """Process a single transaction line."""
        # Extract dates (DD/MM/YYYY format)
        dates = re.findall(r'\d{2}/\d{2}/\d{4}', line)

        # Only process lines with exactly 2 dates (transaction and value dates)
        if len(dates) != 2:
            return None

        # Remove dates from text
        details = re.sub(r'\d{2}/\d{2}/\d{4}', '', line)

        # Extract amounts
        amounts = re.findall(r'-?[\d,]+\.\d{2}', details)
        if len(amounts) < 2:  # Need at least 2 amounts (transaction amount and balance)
            return None

        # Last amount is always the balance
        balance = float(amounts[-1].replace(',', ''))

        # First amount is either debit or credit
        transaction_amount = float(amounts[0].replace(',', ''))
        debit = str(transaction_amount) if transaction_amount > 0 else None
        credit = str(abs(transaction_amount)) if transaction_amount < 0 else None

        # Clean transaction details
        details = re.sub(r'-?[\d,]+\.\d{2}', '', details)
        details = ' '.join(details.split())  # Normalize whitespace

        return {
            'trans_date': dates[0],
            'value_date': dates[1],
            'transaction_details': details.strip(),
            'debit': debit,
            'credit': credit,
            'balance': balance
        }

    def extract_table_from_pdf_text(self, text: str) -> List[Dict[str, Any]]:
        """Extract transaction data from PDF text."""
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        transactions = []

        # Process each line, only keeping those that match transaction pattern
        for line in lines:
            result = self._process_transaction_line(line)
            if result:
                transactions.append(result)

        return transactions

    def load_pdf_statement(self, file_path: Path) -> pd.DataFrame:
        """Load and process a PDF bank statement."""
        with open(file_path, 'rb') as file:
            pdf = PyPDF2.PdfReader(file)
            text = ' '.join(page.extract_text() for page in pdf.pages)

        transactions = self.extract_table_from_pdf_text(text)

        if not transactions:
            return pd.DataFrame(columns=[
                'trans_date', 'value_date', 'transaction_details',
                'debit', 'credit', 'balance'
            ])

        df = pd.DataFrame(transactions)

        # Convert dates to datetime
        for date_col in ['trans_date', 'value_date']:
            if date_col in df.columns:
                df[date_col] = pd.to_datetime(df[date_col], format='%d/%m/%Y', errors='coerce')

        return df

    def load_csv_statement(self, file_path: Path) -> pd.DataFrame:
        """Load a CSV bank statement."""
        return pd.read_csv(file_path)

    def load_statement(self, file_path: Optional[Path] = None) -> pd.DataFrame:
        """Load a bank statement file."""
        if file_path is None:
            files = list(self.data_dir.glob('*'))
            if not files:
                raise FileNotFoundError(f"No files found in {self.data_dir}")
            file_path = files[0]

        file_type = self.detect_file_type(file_path)
        loader = self.load_pdf_statement if file_type == 'pdf' else self.load_csv_statement
        return loader(file_path)
